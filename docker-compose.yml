version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:80"        # Exposing frontend on port 3000
    depends_on:
      - backend
    networks:
      - my_network        # Using a shared network


  backend:
    build:
      context: ./backend
    ports:
      - "8080:8080"       # Exposing backend on port 8080
    depends_on:
      - redis
      - kafka
      - postgres         # Ensure backend starts after PostgreSQL
    environment:
      KAFKA_BROKER: kafka:9092
      REDIS_HOST: redis
      DB_HOST: postgres   # Use the PostgreSQL service name as hostname
      DB_PORT: 5432
      DB_USERNAME: username
      DB_PASSWORD: password
      DB_NAME: drive and deliver
    networks:
      - my_network        # Using a shared network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"       # Exposing Redis port 6379
    networks:
      - my_network

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"       # Exposing Kafka port 9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - my_network

  zookeeper:
    image: wurstmeister/zookeeper:latest 
    ports:
      - "2181:2181"       # Exposing Zookeeper port 2181
    networks:
      - my_network

  postgres:
    image: postgres:latest
    container_name: my_postgres 
    restart: always
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: drive and deliver 
    ports:
      - "5432:5432"
    networks:
      - my_network 

networks:
  my_network:          # Define a shared network for inter-service communication
    driver: bridge 
